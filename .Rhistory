mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
swirl()
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ . - 1, trees)
'trees2 <- eliminate("Girth", trees)'
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ . - 1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays,15)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)$coef
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBoth)
lmInter <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex + hunger$Year * hunger$Sex)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertiliy ~ Agriculture, swiss)
sw
fit1 <- lm(Fertiliy ~ Agriculture, swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
View(hits)
class(hits[,'date'])
class(hits[,'date'])
class(hits[,'date'])
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
as.integer(head(hits[,'date'])
exp(confint(mdl, 'date'))
exp(confint(mdl, 'date'))
info()
summary(mdl)
as.integer(head(hits[,'date']))
exp(confint(mdl, 'date'))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(simplystats ~ date, poisson, hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
VehiclesRaw = read.csv("D:/VShiny/data/vehicles.csv")
nrow(VehiclesRaw)
VehiclesCurr = subset(VehiclesRaw, year >= '2004' & year <= '2015')
nrow(VehiclesCurr)
VehiclesData = subset(VehiclesCurr, ave(year, make, FUN = length) >= max(VehiclesCurr$year) - min(VehiclesCurr$year))
Colnames(VehiclesRaw)
Colname(VehiclesRaw)
ColName(VehiclesRaw)
colnames(VehiclesRaw)
VehiclesRaw =c("id", "year", "mfrCode", "make", "model",
"trany", "VClass", "drive", "cylinders", "displ",
"atvType", "fuelType", "fuelType1", "fuelType2", "phevBlended",
"feScore", "fuelCost08", "fuelCostA08", "youSaveSpend",
"barrels08", "barrelsA08",
"city08", "cityA08", "cityCD", "cityE",
"highway08", "highwayA08", "highwayCD", "highwayE",
"comb08", "combA08", "combE", "combinedCD",
"charge120", "charge240",
"phevCity", "phevHwy", "phevComb",
"co2", "co2A", "co2TailpipeAGpm", "co2TailpipeGpm",
"ghgScore","ghgScoreA")
VehiclesRaw
VehiclesCols =c("id", "year", "mfrCode", "make", "model",
"trany", "VClass", "drive", "cylinders", "displ",
"atvType", "fuelType", "fuelType1", "fuelType2", "phevBlended",
"feScore", "fuelCost08", "fuelCostA08", "youSaveSpend",
"barrels08", "barrelsA08",
"city08", "cityA08", "cityCD", "cityE",
"highway08", "highwayA08", "highwayCD", "highwayE",
"comb08", "combA08", "combE", "combinedCD",
"charge120", "charge240",
"phevCity", "phevHwy", "phevComb",
"co2", "co2A", "co2TailpipeAGpm", "co2TailpipeGpm",
"ghgScore","ghgScoreA")
VehiclesRaw = VehiclesRaw[VehiclesCols]
VehiclesCurr1 = subset(VehiclesRaw, year >= '2004' & year <= '2015',
select=c(ehiclesCols))
VehiclesRaw = read.csv("D:/VShiny/data/vehicles.csv")
nrow(VehiclesRaw)
VehiclesCols =c("id", "year", "mfrCode", "make", "model",
"trany", "VClass", "drive", "cylinders", "displ",
"atvType", "fuelType", "fuelType1", "fuelType2", "phevBlended",
"feScore", "fuelCost08", "fuelCostA08", "youSaveSpend",
"barrels08", "barrelsA08",
"city08", "cityA08", "cityCD", "cityE",
"highway08", "highwayA08", "highwayCD", "highwayE",
"comb08", "combA08", "combE", "combinedCD",
"charge120", "charge240",
"phevCity", "phevHwy", "phevComb",
"co2", "co2A", "co2TailpipeAGpm", "co2TailpipeGpm",
"ghgScore","ghgScoreA")
VehiclesCurr1 = subset(VehiclesRaw, year >= '2004' & year <= '2015',
select=c(VehiclesCols))
View(VehiclesCurr1)
VehiclesRaw = read.csv("D:/VShiny/data/vehicles.csv")
nrow(VehiclesRaw)
colnames(VehiclesRaw)
VehiclesCols =c("id", "year", "mfrCode", "make", "model",
"trany", "VClass", "drive", "cylinders", "displ",
"atvType", "fuelType", "fuelType1", "fuelType2", "phevBlended",
"feScore", "fuelCost08", "fuelCostA08", "youSaveSpend",
"barrels08", "barrelsA08",
"city08", "cityA08", "cityCD", "cityE",
"highway08", "highwayA08", "highwayCD", "highwayE",
"comb08", "combA08", "combE", "combinedCD",
"charge120", "charge240",
"phevCity", "phevHwy", "phevComb",
"co2", "co2A", "co2TailpipeAGpm", "co2TailpipeGpm",
"ghgScore","ghgScoreA")
VehiclesCurr = subset(VehiclesRaw, year >= '2004' & year <= '2015',
select=c(VehiclesCols))
View(VehiclesCurr)
nrow(VehiclesCurr)
VehiclesData = subset(VehiclesCurr, ave(year, make, FUN = length) >= max(VehiclesCurr$year) - min(VehiclesCurr$year))
nrow(VehiclesData)
shiny::runApp('C:/Mala/Rwd-coursera/Course-Developing Data Products/AATA')
shiny::runApp('C:/Mala/Rwd-coursera/Course-Developing Data Products/AATA_auMotionchart')
VehiclesRaw = read.csv("C:/VShiny/data/vehicles.csv")
VehiclesCols =c("id", "year", "mfrCode", "make", "model",
"trany", "VClass", "drive", "cylinders", "displ",
"atvType", "fuelType", "fuelType1", "fuelType2", "phevBlended",
"feScore", "fuelCost08", "fuelCostA08", "youSaveSpend",
"barrels08", "barrelsA08",
"city08", "cityA08", "cityCD", "cityE",
"highway08", "highwayA08", "highwayCD", "highwayE",
"comb08", "combA08", "combE", "combinedCD",
"charge120", "charge240",
"phevCity", "phevHwy", "phevComb",
"co2", "co2A", "co2TailpipeAGpm", "co2TailpipeGpm",
"ghgScore","ghgScoreA")
VehiclesCurr = subset(VehiclesRaw, year >= '2004' & year <= '2015',
select=c(VehiclesCols))
VehiclesData = subset(VehiclesCurr, ave(year, make, FUN = length) >= max(VehiclesCurr$year) - min(VehiclesCurr$year))
VehiclesData$transtype[grepl("^Auto", VehiclesData$trany)] <- 'Automatic'
VehiclesData$transtype[grepl("^Manual", VehiclesData$trany)] <- 'Manual'
vchmakes = c("Acura", "Audi", "BMW", "Cadillac", "Chevrolet", "Chrysler","Dodge",
"Ferrari", "Ford", "Honda", "Lamborghini", "Lotus", "Maserati", "Mazda",
"Mercedes-Benz", "Nissan", "Porsche", "Toyota", "Aston Martn", "Jaguar", "Lexus",
"MINI", "Mitsubishi", "Volkswagen", "Hyundai", "Roush Performance", "Saab", "Subaru",
"Scion", "Volvo",  "Bentley", "Infiniti", "Kia", "Pontiac", "Saturn",
"Suzuki", "Buick",  "Lincoln", "Mercury", "Rolls-Royce", "Maybach", "GMC",
"Isuzu", "Jeep", "Land Rover", "Spyker",  "Hummer", "smart", "Fiat",
"Ram", "Tesla")
VchSumData = ddply(VehiclesData, c("make", "year", "transtype"), summarise,
youSaveSpend = sum(youSaveSpend))
require(plyr)
VchSumData = ddply(VehiclesData, c("make", "year", "transtype"), summarise,
youSaveSpend = sum(youSaveSpend))
require(rCharts)
x1 <- xPlot(value ~ year, group = "transtype", data = VchSumData, type = "line-dotted")
x1$print("chart4")
x1 <- xPlot(value ~ year, group = "transtype", data = VchSumData, type = "line-dotted")
VchSumData = ddply(VehiclesData, c("make", "year", "transtype"), summarise,
youSaveSpend = sum(youSaveSpend))
require(rCharts)
x1 <- xPlot(value ~ year, group = "transtype", data = VchSumData, type = "line-dotted")
x2 <- xPlot(youSaveSpend ~ year, group = "category", data = VchSumData, type = "line-dotted")
x2 <- xPlot(youSaveSpend ~ year, group = "transtype", data = VchSumData, type = "line-dotted")
x1
x2
x2$print("chart4")
x2 <- xPlot(youSaveSpend ~ year, group = "transtype", data = VehiclesData, type = "line-dotted")
x2
r1 <- ePlot('year', '(youSaveSpend', data = usp, group = 'VchSumData', type = 'line')
require(rCharts)
r1 <- ePlot('year', 'youSaveSpend', data = usp, group = 'VchSumData', type = 'line')
ePlot <- function(x, y, data, group, type, colors, ...){
require(rCharts); require(plyr)
if (!missing(group)){
series = setNames(dlply(data, group, function(d){
list(
name = d[[group]][1],
type = type,
data = d[[y]],
...
)
}), NULL)
}
xAxis = list(
type = 'category',
data = unique(data[[x]])
)
legend = list(
data = unique(data[[group]])
)
if (!missing(colors)){
series = lapply(seq_along(series), function(i){
series[[i]]$itemStyle = list(normal = list(color = colors[i]))
return(series[[i]])
})
}
r1 <- rCharts$new()
r1$setLib('echarts')
r1$set(series = series, xAxis = xAxis, legend = legend)
r1
}
r1 <- ePlot('year', 'youSaveSpend', data = usp, group = 'VchSumData', type = 'line')
r1 <- ePlot('year', 'youSaveSpend', data = VchSumData, group = 'VchSumData', type = 'line')
r1 <- ePlot('year', 'youSaveSpend', data = VchSumData, group = 'transtype', type = 'line')
r1
r1
r1$save('line_chart.html', static = F)
echarts
config.yml
js
echarts-map.js
echarts.js
esl.js
layouts
chart.html
1 <- nPlot(youSaveSpend ~ year, group =  'transtype', data = VchSumData,
type = 'stackedAreaChart', id = 'chart')
n1 <- nPlot(youSaveSpend ~ year, group =  'transtype', data = VchSumData,
type = 'stackedAreaChart', id = 'chart')
n1
n1 <- nPlot(youSaveSpend ~ year, group =  'transtype', data = VchSumData,
type = 'stackedAreaChart', id = 'chart')
n1
my.hPlot <- hPlot(x = "year", y = "youSaveSpend", group = 'transtypee',
data = VchSumData, type = 'line')
hPlot <- hPlot(x = "year", y = "youSaveSpend", group = 'transtypee',
data = VchSumData, type = 'line')
hPlot <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',
data = VchSumData, type = 'line')
hPlot1 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',  data = VchSumData, type = 'line')
hPlot1
hPlot1 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',  data = VchSumData, type = 'point')
hPlot1
hPlot1
hPlpot1
hPlot1
hPlot1 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',  data = VchSumData, type = 'line')
hPlot1
hPlot2 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',
data = VchSumData, type = c('line', "bubble"))
hPlot2 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype', data = VchSumData, type = c('line', "bubble"))
hPlot2 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',
data = VchSumData, type = c('line', "bubble"), size = "youSaveSpend"))
hPlot2 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',
data = VchSumData, type = c('line', "bubble"), size = "youSaveSpend")
hPlot2
hPlot2 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',
data = VchSumData, type = c('line', "bubble", "dot"), size = "youSaveSpend")
hPlot2
hPlot1 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',  data = VchSumData, type = 'line')
hPlot1
hPlot1 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',  data = VchSumData, type = 'bubble')
hPlot1 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',  data = VchSumData, type = 'dot')
hPlot1
hPlot1 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',  data = VchSumData, type = 'line')
hPlot1
hPlot1 <- hPlot(x = "year", y = "youSaveSpend", group = 'transtype',  data = VchSumData, type = 'line')
hPlot1
shiny::runApp('C:/Mala/Rwd-coursera/Course-Developing Data Products/AATA_auMotionchart')
shiny::runApp('C:/VShiny')
library(plyr)
library(dplyr)
VehiclesDataChk1 = ddply(VehiclesData, c("make", "year", "transtype"), summarise,
N    = sum(youSaveSpend))
VehiclesDataChk1
library(plyr)
VchfeScore = ddply(VchfeScore, c("make", "year", "transtype", "atvType", "feScore"),
summarise,
feScore = sum(feScore))
VchfeScore
Vchfemake = unique(VchfeScore$make)
Vchfemake
Vchfemake = c(unique(VchfeScore$make))
Vchfemake
Vchfemake = unique(VchfeScore$make)
Vchfemake
Vchfemake = c(VchfeScore$make)
Vchfemake
is.character(Vchfemake)
Vchfemake = unique(VchfeScore$make)
is.character(Vchfemake)
is.numeric(Vchfemake)
chfemake = as.character(unique(VchfeScore$make))
chfemake
Vchfemake = as.character(unique(VchfeScore$make))
shiny::runApp('D:/AATA_auMotionchart')
shiny::runApp('D:/AATA_auMotionchart')
shiny::runApp('D:/AATA_auMotionchart')
shiny::runApp('D:/AATA_auMotionchart')
shiny::runApp('C:/VShiny')
shiny::runApp('C:/VShiny')
autoAnlbarrels <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, barrels))
sumautobrls = ddply(autoAnlbarrels, c("year", "make", "model", "fuelType1", "fuelType2"),
summarise,
barrels = round(sum(barrels)),2)
View(sumautobrls)
sumautobrls = ddply(autoAnlbarrels, c("year", "make", "model", "fuelType1", "fuelType2"),
summarise,
barrels = sum(barrels))
View(sumautobrls)
shiny::runApp('C:/VShiny')
shiny::runApp('C:/VShiny')
sumautobrls = ddply(autoAnlbarrels, c("year", "make", "model", "fuelType1", "fuelType2"),
summarise,
barrels = round(sum(barrels)), digits = 2)
View(sumautobrls)
autoAnlbarrels <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, round(barrels, digits=2))
View(autoAnlbarrels)
View(autoAnlbarrels)
autoAnlbarrels <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, round(barrels, 2))
)
View(autoAnlbarrels)
autoAnlbarrels <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, as.mumeric(round(barrels, 2))
)
View(autoAnlbarrels)
View(autoAnlbarrels)
autoAnlbarrels <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, as.numeric(round(barrels, 2)))
)
View(autoAnlbarrels)
View(autoAnlbarrels)
autoAnlbarrels <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, round(barrels))
)
View(autoAnlbarrels)
autoAnlbarrels <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, barrels))
View(autoAnlbarrels)
shiny::runApp('C:/VShiny')
shiny::runApp('C:/VShiny')
autoAnlbarrels1 <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, as.numeric(barrels)))
View(autoAnlbarrels1)
autoAnlbarrels1 <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, round(as.numeric(barrels))))
View(autoAnlbarrels1)
autoAnlbarrels1 <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, round(as.numeric(barrels)),1))
View(autoAnlbarrels1)
View(autoAnlbarrels1)
autoAnlbarrels1$barrels <- round(barrels)
autoAnlbarrels1$barrels <- round(autoAnlbarrels1barrels)
autoAnlbarrels1 <- subset(VehiclesData, transtype == "Automatic" & barrelsA08 > 0,
select = c(year, make, model, fuelType1, fuelType2, barrels))
autoAnlbarrels1$barrels <- round(autoAnlbarrels1$barrels)
View(autoAnlbarrels1)
shiny::runApp('C:/VShiny')
shiny::runApp('C:/VShiny')
shiny::runApp('C:/VShiny')
shiny::runApp('C:/VShiny')
shiny::runApp('C:/VShiny')
shiny::runApp('C:/VShiny')
shiny::runApp('C:/VShiny')
title: "Motor Analysis"
output: slidy_presentation
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
library(slidify)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
## R Markdown
This is an R Markdown presentation. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document.
## Slide with Bullets
- Bullet 1
- Bullet 2
install.packages("digest")
| [, 8]	| vs | V/S |
Test Presentation
========================================================
install.package(slidify)
install.packages(slidify)
install.packages("slidify")
library(devtools)
install.packages("devtools"")
""
install.packages("devtools")
install.packages("devtools")
install_github("slidify")
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv')
librar(devtools)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv/slidify')
install_github('slidifyLibraries', 'ramnathv')
session_info()
setwd("C:/Mala/Rwd-coursera/AATASlidify")
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
slidify('C:/Mala/Rwd-coursera/AATASlidify/index.Rmd')
install_version("stringr", version="0.6.2", type = "source")
slidify('C:/Mala/Rwd-coursera/AATASlidify/index.Rmd')
install_github('ramnathv/slidify', ref = github_pull(425))
slidify('C:/Mala/Rwd-coursera/AATASlidify/index.Rmd')
library(slidify)
slidify('C:/Mala/Rwd-coursera/AATASlidify/index.Rmd')
shiny::runApp('C:/VShiny')
